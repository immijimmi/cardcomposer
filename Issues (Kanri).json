{
  "columns": [
    {
      "cards": [],
      "id": "itzi87y1jxk60w8ppzj0z6tp",
      "title": "Notes"
    },
    {
      "id": "qqlgedz2grcezc5crjqo9jnu",
      "title": "Ideas",
      "cards": [
        {
          "name": "Step Handler Auto-Documentation",
          "description": "- Some way to indicate externally which keys will be indexed out of a step by the step hander, and what constraints the relevant values have (required or optional, which keys are exclusive of each other, expected type, possibly an additional docstring per value to indicate more unique constraints)\n  - Should be possible to 'register' this metadata along with storing the step handler itself - perhaps a method which is responsible for indexing both the metadata into a lookup dict on the instance, and also the handler into the existing handlers lookup dict? Then since this metadata is now available to the instance, it could be used to automate retrieval and processing of data from a step before passing it into the step handler - if flagged as 'optional' then perform a `.get()` on the step with the desired default value as also taken from the metadata, if multiple keys are flagged as exclusive of each other then raise an exception if multiple are present etc."
        }
      ]
    },
    {
      "cards": [],
      "id": "kz1t457fiblfbas8s7mxs0pj",
      "title": "Issues"
    },
    {
      "cards": [
        {
          "description": "- Any exceptions thrown due to incorrect step data should indicate where in the data the problem occurred. Preferably as specifically as possible, but more importantly done in a way that does not require constant maintenance.\n  - With that in mind, possibly a try/except around `image = step(image, step, self)` which then catches and re-throws the exception with the additional information that the exception was due to incorrect step data\n  - Alternatively, are there any generic data validation libraries that could be worked with?",
          "name": "Data Validation & Invalid Data Error Handling"
        }
      ],
      "id": "kpk0wn7cyclskdefovgk84pm",
      "title": "Icebox"
    },
    {
      "cards": [
        {
          "description": "- Step which prints text on a card face\n- Should require a point location, font, size & color",
          "name": "Text Step"
        }
      ],
      "id": "s3svm1k7ljtf51in0uzs23xi",
      "title": "Backlog"
    },
    {
      "cards": [],
      "id": "nqa0263wpbpu6hbjugdg0ny1",
      "title": "Urgent"
    },
    {
      "cards": [],
      "id": "e5tot30hst4jss96m666k5oo",
      "title": "Doing"
    },
    {
      "cards": [],
      "id": "t989tdx1pj14i8am5hyftqvd",
      "title": "Done"
    }
  ],
  "id": "ik01vu8a0wkvxnd42giodbpf",
  "lastEdited": "2023-11-11T07:20:08.502Z",
  "title": "cardcomposer"
}